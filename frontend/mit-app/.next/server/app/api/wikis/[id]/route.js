(()=>{var e={};e.id=577,e.ids=[577],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},16126:(e,r,t)=>{"use strict";t.d(r,{GB:()=>i});let s=require("sqlite3"),n=new(t.n(s)()).Database("./database/db.sqlite",e=>{e?console.error("Failed to connect to database:",e.message):console.log("Connected to SQLite database.")});function i(e,r=[]){return new Promise((t,s)=>{n.all(e,r,(e,r)=>{e?s(Error(`SQLite Error: ${e.message}`)):t(r)})})}},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},66007:(e,r,t)=>{"use strict";t.r(r),t.d(r,{patchFetch:()=>k,routeModule:()=>c,serverHooks:()=>w,workAsyncStorage:()=>l,workUnitAsyncStorage:()=>x});var s={};t.r(s),t.d(s,{GET:()=>d,PUT:()=>p});var n=t(96559),i=t(48088),o=t(37719),a=t(32190),u=t(16126);async function d(e,{params:r}){let t=(await r).id;if(!t||isNaN(Number(t)))return a.NextResponse.json({error:"Invalid wiki ID."},{status:400});try{let e=await (0,u.GB)("SELECT * FROM wiki WHERE id = ?",[t]);if(!e||0===e.length)return a.NextResponse.json({error:"Wiki entry not found."},{status:404});return a.NextResponse.json(e[0])}catch(e){return console.error("Error fetching wiki entry:",e),a.NextResponse.json({error:"Failed to fetch wiki entry."},{status:500})}}async function p(e,{params:r}){let t=(await r).id;try{let{title:r,content:s}=await e.json();if(!r||!s)return a.NextResponse.json({error:"Title and content are required."},{status:400});if(!await (0,u.GB)("UPDATE wiki SET title = ?, content = ? WHERE id = ?",[r,s,t]))return a.NextResponse.json({error:"Wiki entry not found or no changes made."},{status:404});return a.NextResponse.json({message:"Wiki entry updated successfully."})}catch(e){return console.error("Error updating wiki entry:",e),a.NextResponse.json({error:"Failed to update wiki entry."},{status:500})}}let c=new n.AppRouteRouteModule({definition:{kind:i.RouteKind.APP_ROUTE,page:"/api/wikis/[id]/route",pathname:"/api/wikis/[id]",filename:"route",bundlePath:"app/api/wikis/[id]/route"},resolvedPagePath:"/usr/src/app/src/app/api/wikis/[id]/route.ts",nextConfigOutput:"",userland:s}),{workAsyncStorage:l,workUnitAsyncStorage:x,serverHooks:w}=c;function k(){return(0,o.patchFetch)({workAsyncStorage:l,workUnitAsyncStorage:x})}},78335:()=>{},96487:()=>{}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[447,580],()=>t(66007));module.exports=s})();