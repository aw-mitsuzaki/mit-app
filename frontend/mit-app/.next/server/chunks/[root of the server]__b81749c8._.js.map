{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///usr/src/app/src/lib/db.ts"],"sourcesContent":["import sqlite3 from 'sqlite3';\n\nconst DATABASE_PATH = './database/db.sqlite';\n\n\n// SQLiteデータベースの接続を初期化\nexport const db = new sqlite3.Database(DATABASE_PATH, (err) => {\n    if (err) {\n        console.error('Failed to connect to database:', err.message);\n    } else {\n        console.log('Connected to SQLite database.');\n    }\n});\n\n// 型引数を用いた汎用的なクエリ実行関数\nexport function runQuery<T>(query: string, params: (string | number)[] = []): Promise<T[]> {\n    return new Promise((resolve, reject) => {\n        db.all(query, params, (err, rows) => {\n            if (err) {\n                reject(new Error(`SQLite Error: ${err.message}`));\n            } else {\n                resolve(rows as T[]);\n            }\n        });\n    });\n}\n\n// 単一データ取得用関数\nexport function getQuery<T>(query: string, params: (string | number)[] = []): Promise<T | undefined> {\n    return new Promise((resolve, reject) => {\n        db.get(query, params, (err, row) => {\n            if (err) {\n                reject(new Error(`SQLite Error: ${err.message}`));\n            } else {\n                resolve(row as T | undefined);\n            }\n        });\n    });\n}\n\n// 全データ取得用関数\nexport function allQuery<T>(query: string, params: (string | number)[] = []): Promise<T[]> {\n    return new Promise((resolve, reject) => {\n        db.all(query, params, (err, rows) => {\n            if (err) {\n                reject(new Error(`SQLite Error: ${err.message}`));\n            } else {\n                resolve(rows as T[]);\n            }\n        });\n    });\n}\n\n// データベースを閉じる関数\nexport function closeDatabase(): Promise<void> {\n    return new Promise((resolve, reject) => {\n        db.close((err) => {\n            if (err) {\n                reject(new Error(`Failed to close the database: ${err.message}`));\n            } else {\n                resolve();\n            }\n        });\n    });\n}\n"],"names":[],"mappings":";;;;;;;AAAA;;AAEA,MAAM,gBAAgB;AAIf,MAAM,KAAK,IAAI,uGAAA,CAAA,UAAO,CAAC,QAAQ,CAAC,eAAe,CAAC;IACnD,IAAI,KAAK;QACL,QAAQ,KAAK,CAAC,kCAAkC,IAAI,OAAO;IAC/D,OAAO;QACH,QAAQ,GAAG,CAAC;IAChB;AACJ;AAGO,SAAS,SAAY,KAAa,EAAE,SAA8B,EAAE;IACvE,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,GAAG,GAAG,CAAC,OAAO,QAAQ,CAAC,KAAK;YACxB,IAAI,KAAK;gBACL,OAAO,IAAI,MAAM,CAAC,cAAc,EAAE,IAAI,OAAO,EAAE;YACnD,OAAO;gBACH,QAAQ;YACZ;QACJ;IACJ;AACJ;AAGO,SAAS,SAAY,KAAa,EAAE,SAA8B,EAAE;IACvE,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,GAAG,GAAG,CAAC,OAAO,QAAQ,CAAC,KAAK;YACxB,IAAI,KAAK;gBACL,OAAO,IAAI,MAAM,CAAC,cAAc,EAAE,IAAI,OAAO,EAAE;YACnD,OAAO;gBACH,QAAQ;YACZ;QACJ;IACJ;AACJ;AAGO,SAAS,SAAY,KAAa,EAAE,SAA8B,EAAE;IACvE,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,GAAG,GAAG,CAAC,OAAO,QAAQ,CAAC,KAAK;YACxB,IAAI,KAAK;gBACL,OAAO,IAAI,MAAM,CAAC,cAAc,EAAE,IAAI,OAAO,EAAE;YACnD,OAAO;gBACH,QAAQ;YACZ;QACJ;IACJ;AACJ;AAGO,SAAS;IACZ,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,GAAG,KAAK,CAAC,CAAC;YACN,IAAI,KAAK;gBACL,OAAO,IAAI,MAAM,CAAC,8BAA8B,EAAE,IAAI,OAAO,EAAE;YACnE,OAAO;gBACH;YACJ;QACJ;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///usr/src/app/src/app/api/passwords/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { runQuery } from '../../../lib/db';\n\ntype Password = {\n    id: number;\n    category: string;\n    site_name: string;\n    site_url: string;\n    login_id: string | null;\n    password: string;\n    email: string | null;\n};\n\n// GET: すべての日報を取得\nexport async function GET() {\n    try {\n        const diaries = await runQuery<Password>('SELECT * FROM password_manager ORDER BY category, site_name');\n        return NextResponse.json(diaries);\n    } catch (error) {\n        console.error('Error fetching password_manager:', error);\n        return NextResponse.json({ error: 'Failed to fetch diaries.' }, { status: 500 });\n    }\n}\n\n\n// POST: 新しいパスワードを登録\nexport async function POST(req: Request) {\n    try {\n        const body = await req.json();\n        const { category, site_name, site_url, login_id, password, email, memo } = body;\n\n        if (!site_name || !site_url || !password) {\n            return NextResponse.json({ error: 'Title and content are required.' }, { status: 400 });\n        }\n\n        await runQuery<Password>(\"INSERT INTO password_manager (category, site_name, site_url, login_id, password, email, memo) VALUES (?, ?, ?, ?, ?, ?, ? )\", [category, site_name, site_url, login_id, password, email, memo]);\n        return NextResponse.json({ message: 'password_manager entry created successfully.' });\n    } catch (error) {\n        console.error('Error creating password_manager entry:', error);\n        return NextResponse.json({ error: 'Failed to create diary entry.' }, { status: 500 });\n    }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAaO,eAAe;IAClB,IAAI;QACA,MAAM,UAAU,MAAM,CAAA,GAAA,kHAAA,CAAA,WAAQ,AAAD,EAAY;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,oCAAoC;QAClD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA2B,GAAG;YAAE,QAAQ;QAAI;IAClF;AACJ;AAIO,eAAe,KAAK,GAAY;IACnC,IAAI;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG;QAE3E,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,UAAU;YACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkC,GAAG;gBAAE,QAAQ;YAAI;QACzF;QAEA,MAAM,CAAA,GAAA,kHAAA,CAAA,WAAQ,AAAD,EAAY,+HAA+H;YAAC;YAAU;YAAW;YAAU;YAAU;YAAU;YAAO;SAAK;QACxN,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA+C;IACvF,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,0CAA0C;QACxD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgC,GAAG;YAAE,QAAQ;QAAI;IACvF;AACJ","debugId":null}}]
}