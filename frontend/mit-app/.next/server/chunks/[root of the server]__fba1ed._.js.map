{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///usr/src/app/src/lib/db.ts"],"sourcesContent":["import sqlite3 from 'sqlite3';\n\nconst DATABASE_PATH = './database/db.sqlite';\n\n\n// SQLiteデータベースの接続を初期化\nexport const db = new sqlite3.Database(DATABASE_PATH, (err) => {\n    if (err) {\n        console.error('Failed to connect to database:', err.message);\n    } else {\n        console.log('Connected to SQLite database.');\n    }\n});\n\n// 型引数を用いた汎用的なクエリ実行関数\nexport function runQuery<T>(query: string, params: (string | number)[] = []): Promise<T[]> {\n    return new Promise((resolve, reject) => {\n        db.all(query, params, (err, rows) => {\n            if (err) {\n                reject(new Error(`SQLite Error: ${err.message}`));\n            } else {\n                resolve(rows as T[]);\n            }\n        });\n    });\n}\n\n// 単一データ取得用関数\nexport function getQuery<T>(query: string, params: (string | number)[] = []): Promise<T | undefined> {\n    return new Promise((resolve, reject) => {\n        db.get(query, params, (err, row) => {\n            if (err) {\n                reject(new Error(`SQLite Error: ${err.message}`));\n            } else {\n                resolve(row as T | undefined);\n            }\n        });\n    });\n}\n\n// 全データ取得用関数\nexport function allQuery<T>(query: string, params: (string | number)[] = []): Promise<T[]> {\n    return new Promise((resolve, reject) => {\n        db.all(query, params, (err, rows) => {\n            if (err) {\n                reject(new Error(`SQLite Error: ${err.message}`));\n            } else {\n                resolve(rows as T[]);\n            }\n        });\n    });\n}\n\n// データベースを閉じる関数\nexport function closeDatabase(): Promise<void> {\n    return new Promise((resolve, reject) => {\n        db.close((err) => {\n            if (err) {\n                reject(new Error(`Failed to close the database: ${err.message}`));\n            } else {\n                resolve();\n            }\n        });\n    });\n}\n"],"names":[],"mappings":";;;;;;;AAAA;;AAEA,MAAM,gBAAgB;AAIf,MAAM,KAAK,IAAI,gGAAA,CAAA,UAAO,CAAC,QAAQ,CAAC,eAAe,CAAC;IACnD,IAAI,KAAK;QACL,QAAQ,KAAK,CAAC,kCAAkC,IAAI,OAAO;IAC/D,OAAO;QACH,QAAQ,GAAG,CAAC;IAChB;AACJ;AAGO,SAAS,SAAY,KAAa,EAAE,SAA8B,EAAE;IACvE,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,GAAG,GAAG,CAAC,OAAO,QAAQ,CAAC,KAAK;YACxB,IAAI,KAAK;gBACL,OAAO,IAAI,MAAM,CAAC,cAAc,EAAE,IAAI,OAAO,EAAE;YACnD,OAAO;gBACH,QAAQ;YACZ;QACJ;IACJ;AACJ;AAGO,SAAS,SAAY,KAAa,EAAE,SAA8B,EAAE;IACvE,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,GAAG,GAAG,CAAC,OAAO,QAAQ,CAAC,KAAK;YACxB,IAAI,KAAK;gBACL,OAAO,IAAI,MAAM,CAAC,cAAc,EAAE,IAAI,OAAO,EAAE;YACnD,OAAO;gBACH,QAAQ;YACZ;QACJ;IACJ;AACJ;AAGO,SAAS,SAAY,KAAa,EAAE,SAA8B,EAAE;IACvE,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,GAAG,GAAG,CAAC,OAAO,QAAQ,CAAC,KAAK;YACxB,IAAI,KAAK;gBACL,OAAO,IAAI,MAAM,CAAC,cAAc,EAAE,IAAI,OAAO,EAAE;YACnD,OAAO;gBACH,QAAQ;YACZ;QACJ;IACJ;AACJ;AAGO,SAAS;IACZ,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,GAAG,KAAK,CAAC,CAAC;YACN,IAAI,KAAK;gBACL,OAAO,IAAI,MAAM,CAAC,8BAA8B,EAAE,IAAI,OAAO,EAAE;YACnE,OAAO;gBACH;YACJ;QACJ;IACJ;AACJ"}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file:///usr/src/app/src/app/api/diaries/%5Bid%5D/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { runQuery } from '../../../../lib/db';\n\ntype Diary = {\n    id: number;\n    title: string;\n    content: string;\n    created_at: string;\n};\n\n// GET: 特定の日報を取得\nexport async function GET(request: Request, { params }: { params: Promise<{ id: string }> }) {\n    const id = (await params).id;\n\n    // IDのバリデーション\n    if (!id || isNaN(Number(id))) {\n        return NextResponse.json({ error: 'Invalid diary ID.' }, { status: 400 });\n    }\n\n    try {\n        // 特定のIDの日記を取得\n        const result = await runQuery<Diary>('SELECT * FROM diary WHERE id = ?', [id]);\n\n        if (!result || result.length === 0) {\n            return NextResponse.json({ error: 'Diary entry not found.' }, { status: 404 });\n        }\n\n        return NextResponse.json(result[0]); // 結果を返す\n    } catch (error) {\n        console.error('Error fetching diary entry:', error);\n        return NextResponse.json({ error: 'Failed to fetch diary entry.' }, { status: 500 });\n    }\n}\n\n// PUT: 特定の日報を更新\nexport async function PUT(request: Request, { params }: { params: Promise<{ id: string }> }) {\n    const id = (await params).id;\n\n    try {\n        const body = await request.json();\n\n        const { title, content } = body;\n\n        if (!title || !content) {\n            return NextResponse.json({ error: 'Title and content are required.' }, { status: 400 });\n        }\n\n        const result = await runQuery<Diary>('UPDATE diary SET title = ?, content = ? WHERE id = ?', [\n            title,\n            content,\n            id,\n        ]);\n\n        // 更新が成功したかチェック\n        if (!result) {\n            return NextResponse.json({ error: 'Diary entry not found or no changes made.' }, { status: 404 });\n        }\n\n        return NextResponse.json({ message: 'Diary entry updated successfully.' });\n    } catch (error) {\n        console.error('Error updating diary entry:', error);\n        return NextResponse.json({ error: 'Failed to update diary entry.' }, { status: 500 });\n    }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAUO,eAAe,IAAI,OAAgB,EAAE,EAAE,MAAM,EAAuC;IACvF,MAAM,KAAK,CAAC,MAAM,MAAM,EAAE,EAAE;IAE5B,aAAa;IACb,IAAI,CAAC,MAAM,MAAM,OAAO,MAAM;QAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoB,GAAG;YAAE,QAAQ;QAAI;IAC3E;IAEA,IAAI;QACA,cAAc;QACd,MAAM,SAAS,MAAM,CAAA,GAAA,kHAAA,CAAA,WAAQ,AAAD,EAAS,oCAAoC;YAAC;SAAG;QAE7E,IAAI,CAAC,UAAU,OAAO,MAAM,KAAK,GAAG;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAyB,GAAG;gBAAE,QAAQ;YAAI;QAChF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,QAAQ;IACjD,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA+B,GAAG;YAAE,QAAQ;QAAI;IACtF;AACJ;AAGO,eAAe,IAAI,OAAgB,EAAE,EAAE,MAAM,EAAuC;IACvF,MAAM,KAAK,CAAC,MAAM,MAAM,EAAE,EAAE;IAE5B,IAAI;QACA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG;QAE3B,IAAI,CAAC,SAAS,CAAC,SAAS;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkC,GAAG;gBAAE,QAAQ;YAAI;QACzF;QAEA,MAAM,SAAS,MAAM,CAAA,GAAA,kHAAA,CAAA,WAAQ,AAAD,EAAS,wDAAwD;YACzF;YACA;YACA;SACH;QAED,eAAe;QACf,IAAI,CAAC,QAAQ;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA4C,GAAG;gBAAE,QAAQ;YAAI;QACnG;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAoC;IAC5E,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgC,GAAG;YAAE,QAAQ;QAAI;IACvF;AACJ"}},
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}