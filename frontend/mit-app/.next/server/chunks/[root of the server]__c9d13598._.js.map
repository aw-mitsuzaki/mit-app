{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///usr/src/app/src/lib/db.ts"],"sourcesContent":["import sqlite3 from 'sqlite3';\n\nconst DATABASE_PATH = './database/db.sqlite';\n\n\n// SQLiteデータベースの接続を初期化\nexport const db = new sqlite3.Database(DATABASE_PATH, (err) => {\n    if (err) {\n        console.error('Failed to connect to database:', err.message);\n    } else {\n        console.log('Connected to SQLite database.');\n    }\n});\n\n// 型引数を用いた汎用的なクエリ実行関数\nexport function runQuery<T>(query: string, params: (string | number)[] = []): Promise<T[]> {\n    return new Promise((resolve, reject) => {\n        db.all(query, params, (err, rows) => {\n            if (err) {\n                reject(new Error(`SQLite Error: ${err.message}`));\n            } else {\n                resolve(rows as T[]);\n            }\n        });\n    });\n}\n\n// 単一データ取得用関数\nexport function getQuery<T>(query: string, params: (string | number)[] = []): Promise<T | undefined> {\n    return new Promise((resolve, reject) => {\n        db.get(query, params, (err, row) => {\n            if (err) {\n                reject(new Error(`SQLite Error: ${err.message}`));\n            } else {\n                resolve(row as T | undefined);\n            }\n        });\n    });\n}\n\n// 全データ取得用関数\nexport function allQuery<T>(query: string, params: (string | number)[] = []): Promise<T[]> {\n    return new Promise((resolve, reject) => {\n        db.all(query, params, (err, rows) => {\n            if (err) {\n                reject(new Error(`SQLite Error: ${err.message}`));\n            } else {\n                resolve(rows as T[]);\n            }\n        });\n    });\n}\n\n// データベースを閉じる関数\nexport function closeDatabase(): Promise<void> {\n    return new Promise((resolve, reject) => {\n        db.close((err) => {\n            if (err) {\n                reject(new Error(`Failed to close the database: ${err.message}`));\n            } else {\n                resolve();\n            }\n        });\n    });\n}\n"],"names":[],"mappings":";;;;;;;AAAA;;AAEA,MAAM,gBAAgB;AAIf,MAAM,KAAK,IAAI,uGAAA,CAAA,UAAO,CAAC,QAAQ,CAAC,eAAe,CAAC;IACnD,IAAI,KAAK;QACL,QAAQ,KAAK,CAAC,kCAAkC,IAAI,OAAO;IAC/D,OAAO;QACH,QAAQ,GAAG,CAAC;IAChB;AACJ;AAGO,SAAS,SAAY,KAAa,EAAE,SAA8B,EAAE;IACvE,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,GAAG,GAAG,CAAC,OAAO,QAAQ,CAAC,KAAK;YACxB,IAAI,KAAK;gBACL,OAAO,IAAI,MAAM,CAAC,cAAc,EAAE,IAAI,OAAO,EAAE;YACnD,OAAO;gBACH,QAAQ;YACZ;QACJ;IACJ;AACJ;AAGO,SAAS,SAAY,KAAa,EAAE,SAA8B,EAAE;IACvE,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,GAAG,GAAG,CAAC,OAAO,QAAQ,CAAC,KAAK;YACxB,IAAI,KAAK;gBACL,OAAO,IAAI,MAAM,CAAC,cAAc,EAAE,IAAI,OAAO,EAAE;YACnD,OAAO;gBACH,QAAQ;YACZ;QACJ;IACJ;AACJ;AAGO,SAAS,SAAY,KAAa,EAAE,SAA8B,EAAE;IACvE,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,GAAG,GAAG,CAAC,OAAO,QAAQ,CAAC,KAAK;YACxB,IAAI,KAAK;gBACL,OAAO,IAAI,MAAM,CAAC,cAAc,EAAE,IAAI,OAAO,EAAE;YACnD,OAAO;gBACH,QAAQ;YACZ;QACJ;IACJ;AACJ;AAGO,SAAS;IACZ,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,GAAG,KAAK,CAAC,CAAC;YACN,IAAI,KAAK;gBACL,OAAO,IAAI,MAAM,CAAC,8BAA8B,EAAE,IAAI,OAAO,EAAE;YACnE,OAAO;gBACH;YACJ;QACJ;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///usr/src/app/src/app/api/wikis/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { runQuery } from '../../../lib/db';\n\ntype Wiki = {\n    id: number;\n    title: string;\n    content: string;\n    created_at: string;\n};\n\n// GET: すべてのwikiを取得\nexport async function GET(request: Request) {\n    try {\n      const { searchParams } = new URL(request.url);\n      const limit = searchParams.get('limit');\n  \n      // ベースのクエリ\n      let query = 'SELECT * FROM wiki ORDER BY id DESC';\n      const params: number[] = [];\n  \n      // limit が存在する場合のみ LIMIT 句をつける\n      if (limit) {\n        query += ' LIMIT ?';\n        params.push(Number(limit));\n      }\n  \n      const wikis = await runQuery<Wiki>(query, params);\n      return NextResponse.json(wikis);\n    } catch (error) {\n      console.error('Error fetching wikis:', error);\n      return NextResponse.json({ error: 'Failed to fetch wikis.' }, { status: 500 });\n    }\n  }\n\n// POST: 新しいwikiを登録\nexport async function POST(req: Request) {\n    try {\n        const body = await req.json();\n        const { title, content } = body;\n\n        if (!title || !content) {\n            return NextResponse.json({ error: 'Title and content are required.' }, { status: 400 });\n        }\n\n        await runQuery<Wiki>('INSERT INTO wiki (title, content) VALUES (?, ?)', [title, content]);\n        return NextResponse.json({ message: 'Diary entry created successfully.' });\n    } catch (error) {\n        console.error('Error creating wiki entry:', error);\n        return NextResponse.json({ error: 'Failed to create wiki entry.' }, { status: 500 });\n    }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAUO,eAAe,IAAI,OAAgB;IACtC,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,QAAQ,aAAa,GAAG,CAAC;QAE/B,UAAU;QACV,IAAI,QAAQ;QACZ,MAAM,SAAmB,EAAE;QAE3B,8BAA8B;QAC9B,IAAI,OAAO;YACT,SAAS;YACT,OAAO,IAAI,CAAC,OAAO;QACrB;QAEA,MAAM,QAAQ,MAAM,CAAA,GAAA,kHAAA,CAAA,WAAQ,AAAD,EAAQ,OAAO;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAyB,GAAG;YAAE,QAAQ;QAAI;IAC9E;AACF;AAGK,eAAe,KAAK,GAAY;IACnC,IAAI;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG;QAE3B,IAAI,CAAC,SAAS,CAAC,SAAS;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkC,GAAG;gBAAE,QAAQ;YAAI;QACzF;QAEA,MAAM,CAAA,GAAA,kHAAA,CAAA,WAAQ,AAAD,EAAQ,mDAAmD;YAAC;YAAO;SAAQ;QACxF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAoC;IAC5E,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA+B,GAAG;YAAE,QAAQ;QAAI;IACtF;AACJ","debugId":null}}]
}