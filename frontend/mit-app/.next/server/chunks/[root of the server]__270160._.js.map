{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///usr/src/app/src/app/api/diaries/%5Bid%5D/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { runQuery } from '../../../../lib/db';\n\n// GET: 特定の日報を取得\nexport async function GET(req: Request, { params }: { params: { id: string } }) {\n    const { id } = params; // URLからIDを取得\n\n    // IDのバリデーション\n    if (isNaN(Number(id))) {\n        return NextResponse.json({ error: 'Invalid diary ID.' }, { status: 400 });\n    }\n\n    try {\n        // 特定のIDの日記を取得\n        const result = await runQuery('SELECT * FROM diary WHERE id = ?', [id]);\n\n        if (result.length === 0) {\n            return NextResponse.json({ error: 'Diary entry not found.' }, { status: 404 });\n        }\n\n        return NextResponse.json(result[0]); // 結果を返す\n    } catch (error) {\n        console.error('Error fetching diary entry:', error);\n        return NextResponse.json({ error: 'Failed to fetch diary entry.' }, { status: 500 });\n    }\n}\n\n\n// PUT: 特定の日報を更新\nexport async function PUT(req: Request, { params }: { params: { id: string } }) {\n    const { id } = params; // URLからIDを取得\n\n    try {\n        const body = await req.json();\n        const { title, content } = body;\n\n        if (!title || !content) {\n            return NextResponse.json({ error: 'Title and content are required.' }, { status: 400 });\n        }\n\n        const result = await runQuery('UPDATE diary SET title = ?, content = ? WHERE id = ?', [\n            title,\n            content,\n            id,\n        ]);\n\n        // 更新が成功したかチェック\n        if (result.affectedRows === 0) {\n            return NextResponse.json({ error: 'Diary entry not found or no changes made.' }, { status: 404 });\n        }\n\n        return NextResponse.json({ message: 'Diary entry updated successfully.' });\n    } catch (error) {\n        console.error('Error updating diary entry:', error);\n        return NextResponse.json({ error: 'Failed to update diary entry.' }, { status: 500 });\n    }\n}\n\n\n// DELETE: 特定の日報を削除\nexport async function DELETE(req: Request, { params }: { params: { id: string } }) {\n    const { id } = params; // URLからIDを取得\n\n    // IDのバリデーション\n    if (isNaN(Number(id))) {\n        return NextResponse.json({ error: 'Invalid diary ID.' }, { status: 400 });\n    }\n\n    try {\n        const result = await runQuery('DELETE FROM diary WHERE id = ?', [id]);\n\n        // 削除が成功したかチェック\n        if (result.affectedRows === 0) {\n            return NextResponse.json({ error: 'Diary entry not found.' }, { status: 404 });\n        }\n\n        return NextResponse.json({ message: 'Diary entry deleted successfully.' });\n    } catch (error) {\n        console.error('Error deleting diary entry:', error);\n        return NextResponse.json({ error: 'Failed to delete diary entry.' }, { status: 500 });\n    }\n}\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAGO,eAAe,IAAI,GAAY,EAAE,EAAE,MAAM,EAA8B;IAC1E,MAAM,EAAE,EAAE,EAAE,GAAG,QAAQ,aAAa;IAEpC,aAAa;IACb,IAAI,MAAM,OAAO,MAAM;QACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoB,GAAG;YAAE,QAAQ;QAAI;IAC3E;IAEA,IAAI;QACA,cAAc;QACd,MAAM,SAAS,MAAM,CAAA,GAAA,kHAAA,CAAA,WAAQ,AAAD,EAAE,oCAAoC;YAAC;SAAG;QAEtE,IAAI,OAAO,MAAM,KAAK,GAAG;YACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAyB,GAAG;gBAAE,QAAQ;YAAI;QAChF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,QAAQ;IACjD,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA+B,GAAG;YAAE,QAAQ;QAAI;IACtF;AACJ;AAIO,eAAe,IAAI,GAAY,EAAE,EAAE,MAAM,EAA8B;IAC1E,MAAM,EAAE,EAAE,EAAE,GAAG,QAAQ,aAAa;IAEpC,IAAI;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG;QAE3B,IAAI,CAAC,SAAS,CAAC,SAAS;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkC,GAAG;gBAAE,QAAQ;YAAI;QACzF;QAEA,MAAM,SAAS,MAAM,CAAA,GAAA,kHAAA,CAAA,WAAQ,AAAD,EAAE,wDAAwD;YAClF;YACA;YACA;SACH;QAED,eAAe;QACf,IAAI,OAAO,YAAY,KAAK,GAAG;YAC3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA4C,GAAG;gBAAE,QAAQ;YAAI;QACnG;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAoC;IAC5E,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgC,GAAG;YAAE,QAAQ;QAAI;IACvF;AACJ;AAIO,eAAe,OAAO,GAAY,EAAE,EAAE,MAAM,EAA8B;IAC7E,MAAM,EAAE,EAAE,EAAE,GAAG,QAAQ,aAAa;IAEpC,aAAa;IACb,IAAI,MAAM,OAAO,MAAM;QACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoB,GAAG;YAAE,QAAQ;QAAI;IAC3E;IAEA,IAAI;QACA,MAAM,SAAS,MAAM,CAAA,GAAA,kHAAA,CAAA,WAAQ,AAAD,EAAE,kCAAkC;YAAC;SAAG;QAEpE,eAAe;QACf,IAAI,OAAO,YAAY,KAAK,GAAG;YAC3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAyB,GAAG;gBAAE,QAAQ;YAAI;QAChF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAoC;IAC5E,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgC,GAAG;YAAE,QAAQ;QAAI;IACvF;AACJ"}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}