{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///usr/src/app/src/lib/db.ts"],"sourcesContent":["import sqlite3 from 'sqlite3';\n\nconst DATABASE_PATH = './database/db.sqlite';\n\n// Diaryの型を定義\ntype Diary = {\n    id: number;\n    title: string;\n    content: string;\n    created_at: string; // 必要に応じてDate型に変換も可能\n};\n\n// SQLiteデータベースの接続を初期化\nexport const db = new sqlite3.Database(DATABASE_PATH, (err) => {\n    if (err) {\n        console.error('Failed to connect to database:', err.message);\n    } else {\n        console.log('Connected to SQLite database.');\n    }\n});\n\n// クエリを実行する関数\nexport function runQuery(query: string, params: (string | number)[] = []): Promise<Diary[]> {\n    return new Promise((resolve, reject) => {\n        db.all(query, params, (err, rows) => {\n            if (err) {\n                reject(new Error(`SQLite Error: ${err.message}`));\n            } else {\n                resolve(rows as Diary[]); // 明示的にDiary[]型にキャスト\n            }\n        });\n    });\n}\n\n// 単一のデータを取得する関数\nexport function getQuery(query: string, params: (string | number)[] = []): Promise<Diary | undefined> {\n    return new Promise((resolve, reject) => {\n        db.get(query, params, (err, row) => {\n            if (err) {\n                reject(new Error(`SQLite Error: ${err.message}`));\n            } else {\n                resolve(row as Diary | undefined); // 明示的に型をキャスト\n            }\n        });\n    });\n}\n\n// 全データを取得する関数\nexport function allQuery(query: string, params: (string | number)[] = []): Promise<Diary[]> {\n    return new Promise((resolve, reject) => {\n        db.all(query, params, (err, rows) => {\n            if (err) {\n                reject(new Error(`SQLite Error: ${err.message}`));\n            } else {\n                resolve(rows as Diary[]); // 明示的にDiary[]型にキャスト\n            }\n        });\n    });\n}\n\n// データベースを閉じる関数\nexport function closeDatabase(): Promise<void> {\n    return new Promise((resolve, reject) => {\n        db.close((err) => {\n            if (err) {\n                reject(new Error(`Failed to close the database: ${err.message}`));\n            } else {\n                resolve();\n            }\n        });\n    });\n}\n"],"names":[],"mappings":";;;;;;;AAAA;;AAEA,MAAM,gBAAgB;AAWf,MAAM,KAAK,IAAI,gGAAA,CAAA,UAAO,CAAC,QAAQ,CAAC,eAAe,CAAC;IACnD,IAAI,KAAK;QACL,QAAQ,KAAK,CAAC,kCAAkC,IAAI,OAAO;IAC/D,OAAO;QACH,QAAQ,GAAG,CAAC;IAChB;AACJ;AAGO,SAAS,SAAS,KAAa,EAAE,SAA8B,EAAE;IACpE,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,GAAG,GAAG,CAAC,OAAO,QAAQ,CAAC,KAAK;YACxB,IAAI,KAAK;gBACL,OAAO,IAAI,MAAM,CAAC,cAAc,EAAE,IAAI,OAAO,EAAE;YACnD,OAAO;gBACH,QAAQ,OAAkB,oBAAoB;YAClD;QACJ;IACJ;AACJ;AAGO,SAAS,SAAS,KAAa,EAAE,SAA8B,EAAE;IACpE,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,GAAG,GAAG,CAAC,OAAO,QAAQ,CAAC,KAAK;YACxB,IAAI,KAAK;gBACL,OAAO,IAAI,MAAM,CAAC,cAAc,EAAE,IAAI,OAAO,EAAE;YACnD,OAAO;gBACH,QAAQ,MAA2B,aAAa;YACpD;QACJ;IACJ;AACJ;AAGO,SAAS,SAAS,KAAa,EAAE,SAA8B,EAAE;IACpE,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,GAAG,GAAG,CAAC,OAAO,QAAQ,CAAC,KAAK;YACxB,IAAI,KAAK;gBACL,OAAO,IAAI,MAAM,CAAC,cAAc,EAAE,IAAI,OAAO,EAAE;YACnD,OAAO;gBACH,QAAQ,OAAkB,oBAAoB;YAClD;QACJ;IACJ;AACJ;AAGO,SAAS;IACZ,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,GAAG,KAAK,CAAC,CAAC;YACN,IAAI,KAAK;gBACL,OAAO,IAAI,MAAM,CAAC,8BAA8B,EAAE,IAAI,OAAO,EAAE;YACnE,OAAO;gBACH;YACJ;QACJ;IACJ;AACJ"}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file:///usr/src/app/src/app/api/diaries/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { runQuery } from '../../../lib/db';\n\n// GET: すべての日報を取得\nexport async function GET() {\n    try {\n        const diaries = await runQuery('SELECT * FROM diary');\n        return NextResponse.json(diaries);\n    } catch (error) {\n        console.error('Error fetching diaries:', error);\n        return NextResponse.json({ error: 'Failed to fetch diaries.' }, { status: 500 });\n    }\n}\n\n\n// POST: 新しい日報を登録\nexport async function POST(req: Request) {\n    try {\n        const body = await req.json();\n        const { title, content } = body;\n\n        if (!title || !content) {\n            return NextResponse.json({ error: 'Title and content are required.' }, { status: 400 });\n        }\n\n        await runQuery('INSERT INTO diary (title, content) VALUES (?, ?)', [title, content]);\n        return NextResponse.json({ message: 'Diary entry created successfully.' });\n    } catch (error) {\n        console.error('Error creating diary entry:', error);\n        return NextResponse.json({ error: 'Failed to create diary entry.' }, { status: 500 });\n    }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,eAAe;IAClB,IAAI;QACA,MAAM,UAAU,MAAM,CAAA,GAAA,kHAAA,CAAA,WAAQ,AAAD,EAAE;QAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA2B,GAAG;YAAE,QAAQ;QAAI;IAClF;AACJ;AAIO,eAAe,KAAK,GAAY;IACnC,IAAI;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG;QAE3B,IAAI,CAAC,SAAS,CAAC,SAAS;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkC,GAAG;gBAAE,QAAQ;YAAI;QACzF;QAEA,MAAM,CAAA,GAAA,kHAAA,CAAA,WAAQ,AAAD,EAAE,oDAAoD;YAAC;YAAO;SAAQ;QACnF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAoC;IAC5E,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgC,GAAG;YAAE,QAAQ;QAAI;IACvF;AACJ"}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}